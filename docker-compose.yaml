# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
# Adapted for project-data-warehouse structure with dbt projects
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.10.5-python3.11
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: airflow:py311
  build: 
    context: .
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    # Airflow DAGs et logs dans /opt/airflow/
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs

    # Scripts Python et fichiers data dans /opt/airflow/
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/scripts:/opt/airflow/scripts

    # Configurations et plugins dans /opt/airflow/
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins

    # Configuration dbt dans /opt/airflow/.dbt
    - ${AIRFLOW_PROJ_DIR:-.}/.dbt:/opt/airflow/.dbt

    # Montage séparé des projets dbt (optionnel)
    - ${AIRFLOW_PROJ_DIR:-.}/.dbt/dbt_projects/bank_reviews_decisionnal:/opt/.dbt/dbt_projects/bank_reviews_decisionnal
    - ${AIRFLOW_PROJ_DIR:-.}/.dbt/dbt_projects/bank_reviews_transactional:/opt/.dbt/dbt_projects/bank_reviews_transactional

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        
        # Create necessary directories for the project structure
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/config
        mkdir -p /sources/airflow/scripts /sources/.dbt/dbt_projects/bank_reviews_decisionnal /sources/.dbt/dbt_projects/bank_reviews_transactional
        
        # Set proper permissions
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,config,airflow,.dbt}
        
        
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:




# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Configuration Airflow optimisée pour projet data warehouse avec dbt
# ATTENTION: Configuration pour développement local uniquement

# version: '3.8'

# x-airflow-common:
#   &airflow-common
#   build: 
#     context: .
#     dockerfile: Dockerfile
#   environment:
#     &airflow-common-env
#     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
#     AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#     AIRFLOW__CORE__FERNET_KEY: 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
#     AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
#     AIRFLOW__WEBSERVER__RBAC: 'true'
#     AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 300
#     AIRFLOW__CORE__PARALLELISM: 32
#     AIRFLOW__CORE__DAG_CONCURRENCY: 16
#     AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 16
#     # Variables dbt
#     DBT_PROFILES_DIR: /opt/airflow/.dbt
#     DBT_PROJECT_DIR: /opt/airflow/dbt_projects
#     # Variables Chrome/Selenium
#     CHROME_BIN: /usr/bin/google-chrome
#     CHROMEDRIVER_PATH: /usr/local/bin/chromedriver
#     DISPLAY: :99
#     _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
#   volumes:
#     # Structure de fichiers optimisée
#     - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
#     - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
#     - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
#     - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
#     - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts
#     - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    
#     # Configuration dbt
#     - ${AIRFLOW_PROJ_DIR:-.}/.dbt:/opt/airflow/.dbt
    
#     # Cache et tmp
#     - airflow-cache:/opt/airflow/.cache
#     - /tmp:/tmp
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on: &airflow-common-depends-on
#     redis:
#       condition: service_healthy
#     postgres:
#       condition: service_healthy

# services:
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: airflow
#       POSTGRES_PASSWORD: airflow
#       POSTGRES_DB: airflow
#       POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
#     volumes:
#       - postgres-db-volume:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "airflow"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 10s
#     restart: unless-stopped
#     command: >
#       postgres 
#       -c log_statement=all
#       -c log_min_duration_statement=0
#       -c max_connections=200
#       -c shared_preload_libraries=pg_stat_statements

#   redis:
#     image: redis:7.2-alpine
#     expose:
#       - 6379
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 30s
#       retries: 50
#       start_period: 30s
#     restart: unless-stopped
#     command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

#   airflow-webserver:
#     <<: *airflow-common
#     command: webserver
#     ports:
#       - "8080:8080"
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     restart: unless-stopped
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-scheduler:
#     <<: *airflow-common
#     command: scheduler
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     restart: unless-stopped
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-worker:
#     <<: *airflow-common
#     command: celery worker
#     healthcheck:
#       test:
#         - "CMD-SHELL"
#         - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || exit 1'
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     environment:
#       <<: *airflow-common-env
#       DUMB_INIT_SETSID: "0"
#     restart: unless-stopped
#     deploy:
#       replicas: 2
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-triggerer:
#     <<: *airflow-common
#     command: triggerer
#     healthcheck:
#       test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     restart: unless-stopped
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-init:
#     <<: *airflow-common
#     entrypoint: /bin/bash
#     command:
#       - -c
#       - |
#         set -e
        
#         echo "🚀 Initialisation d'Airflow..."
        
#         # Vérifications des ressources système
#         one_meg=1048576
#         mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
#         cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        
#         echo "💾 Mémoire disponible: $$(numfmt --to iec $$((mem_available * one_meg)))"
#         echo "🖥️  CPUs disponibles: $${cpus_available}"
        
#         if (( mem_available < 4000 )); then
#           echo "⚠️  ATTENTION: Mémoire insuffisante (minimum 4GB requis)"
#         fi
        
#         # Création de la structure de répertoires
#         echo "📁 Création des répertoires..."
#         mkdir -p /sources/{dags,logs,plugins,config,scripts,data}
#         mkdir -p /sources/.dbt/{profiles,dbt_projects}
#         mkdir -p /sources/dbt_projects/{bank_reviews_decisionnal,bank_reviews_transactional}
        
#         # Permissions appropriées
#         echo "🔐 Configuration des permissions..."
#         chown -R "${AIRFLOW_UID}:0" /sources/
#         find /sources -type d -exec chmod 755 {} \;
#         find /sources -type f -exec chmod 644 {} \;
        
#         # Initialisation base de données
#         echo "🗄️  Initialisation de la base de données..."
#         airflow db init
        
#         # Création utilisateur admin
#         echo "👤 Création de l'utilisateur admin..."
#         airflow users create \
#           --username "${_AIRFLOW_WWW_USER_USERNAME:-admin}" \
#           --firstname "Admin" \
#           --lastname "User" \
#           --role "Admin" \
#           --email "admin@example.com" \
#           --password "${_AIRFLOW_WWW_USER_PASSWORD:-admin}" || true
        
#         echo "✅ Initialisation terminée avec succès!"
        
#     environment:
#       <<: *airflow-common-env
#       _AIRFLOW_DB_MIGRATE: 'true'
#       _AIRFLOW_WWW_USER_CREATE: 'true'
#       _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
#       _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
#       _PIP_ADDITIONAL_REQUIREMENTS: ''
#     user: "0:0"
#     volumes:
#       - ${AIRFLOW_PROJ_DIR:-.}:/sources

#   # Service optionnel pour monitoring Celery
#   flower:
#     <<: *airflow-common
#     command: celery flower
#     profiles:
#       - flower
#     ports:
#       - "5555:5555"
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     restart: unless-stopped
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Service optionnel pour interface CLI
#   airflow-cli:
#     <<: *airflow-common
#     profiles:
#       - debug
#     environment:
#       <<: *airflow-common-env
#       CONNECTION_CHECK_MAX_COUNT: "0"
#     command:
#       - bash
#       - -c
#       - airflow

# volumes:
#   postgres-db-volume:
#   airflow-cache:


# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Configuration Airflow optimisée pour projet data warehouse avec dbt
# Pour développement local - NE PAS utiliser en production

# version: '3.8'

# x-airflow-common:
#   &airflow-common
#   build: 
#     context: .
#     dockerfile: Dockerfile
#   environment:
#     &airflow-common-env
#     # Configuration Airflow de base
#     AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Plus simple que Celery pour dev
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     AIRFLOW__CORE__FERNET_KEY: 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
#     AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
#     AIRFLOW__WEBSERVER__RBAC: 'true'
    
#     # Optimisations performances
#     AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 300
#     AIRFLOW__CORE__PARALLELISM: 16
#     AIRFLOW__CORE__DAG_CONCURRENCY: 8
#     AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 8
#     AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 300
#     AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'
    
#     # Configuration dbt
#     DBT_PROFILES_DIR: /opt/airflow/.dbt
#     DBT_PROJECT_DIR: /opt/airflow/dbt_projects
    
#     # Configuration Chrome/Selenium
#     CHROME_BIN: /usr/bin/google-chrome
#     CHROMEDRIVER_PATH: /usr/local/bin/chromedriver
#     DISPLAY: :99
    
#     # Variables système
#     PYTHONUNBUFFERED: 1
#     AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    
#   volumes:
#     # Structure de fichiers optimisée
#     - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
#     - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
#     - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
#     - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
#     - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts
#     - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    
#     # Configuration dbt
#     - ${AIRFLOW_PROJ_DIR:-.}/.dbt:/opt/airflow/.dbt
    
#     # Cache pour améliorer les performances
#     - airflow-worker-tmp:/tmp
    
#   user: "${AIRFLOW_UID:-50000}:0"
#   restart: unless-stopped
#   depends_on: &airflow-common-depends-on
#     postgres:
#       condition: service_healthy

# services:
#   # Base de données PostgreSQL
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: airflow
#       POSTGRES_PASSWORD: airflow
#       POSTGRES_DB: airflow
#       POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
#     volumes:
#       - postgres-db-volume:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 10s
#     restart: unless-stopped
#     command: >
#       postgres 
#       -c max_connections=200
#       -c shared_buffers=256MB
#       -c effective_cache_size=1GB
#       -c maintenance_work_mem=64MB
#       -c checkpoint_completion_target=0.9
#       -c wal_buffers=16MB
#       -c default_statistics_target=100

#   # Interface web Airflow
#   airflow-webserver:
#     <<: *airflow-common
#     command: webserver
#     ports:
#       - "8080:8080"
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Planificateur Airflow
#   airflow-scheduler:
#     <<: *airflow-common
#     command: scheduler
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Triggerer pour les tâches déférées
#   airflow-triggerer:
#     <<: *airflow-common
#     command: triggerer
#     healthcheck:
#       test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Initialisation Airflow
#   airflow-init:
#     <<: *airflow-common
#     entrypoint: /bin/bash
#     command:
#       - -c
#       - |
#         set -e
        
#         echo "🚀 Initialisation d'Airflow pour data warehouse..."
        
#         # Vérifications système rapides
#         echo "💾 Vérification des ressources système..."
#         free -h
#         df -h /
        
#         # Création de la structure de répertoires
#         echo "📁 Création de la structure de répertoires..."
        
#         # Répertoires principaux
#         mkdir -p /sources/{dags,logs,plugins,config,scripts,data}
        
#         # Structure dbt
#         mkdir -p /sources/.dbt/{profiles,logs}
#         mkdir -p /sources/dbt_projects/{bank_reviews_decisionnal,bank_reviews_transactional}
        
#         # Répertoires pour les données et cache
#         mkdir -p /sources/data/{raw,processed,staging}
#         mkdir -p /sources/cache
        
#         # Configuration des permissions
#         echo "🔐 Configuration des permissions..."
#         chown -R "${AIRFLOW_UID:-50000}:0" /sources/
#         find /sources -type d -exec chmod 775 {} \;
#         find /sources -type f -exec chmod 664 {} \; 2>/dev/null || true
        
#         # Initialisation de la base de données Airflow
#         echo "🗄️  Initialisation de la base de données..."
#         airflow db init
        
#         # Mise à jour de la base de données si nécessaire
#         airflow db upgrade
        
#         # Création de l'utilisateur administrateur
#         echo "👤 Création de l'utilisateur administrateur..."
#         airflow users create \
#           --username "${_AIRFLOW_WWW_USER_USERNAME:-admin}" \
#           --firstname "Admin" \
#           --lastname "DataWarehouse" \
#           --role "Admin" \
#           --email "admin@datawarehouse.local" \
#           --password "${_AIRFLOW_WWW_USER_PASSWORD:-admin123}" 2>/dev/null || \
#         echo "ℹ️  L'utilisateur admin existe déjà"
        
#         # Vérification de la configuration dbt
#         echo "🔧 Vérification de la configuration dbt..."
#         if [ ! -f "/sources/.dbt/profiles.yml" ]; then
#           echo "⚠️  Attention: profiles.yml dbt non trouvé"
#           echo "📝 Créez votre fichier profiles.yml dans .dbt/"
#         fi
        
#         echo "✅ Initialisation terminée avec succès!"
#         echo "🌐 Interface web disponible sur: http://localhost:8080"
#         echo "👤 Identifiants: admin / admin123"
        
#     environment:
#       <<: *airflow-common-env
#       _AIRFLOW_DB_MIGRATE: 'true'
#       _AIRFLOW_WWW_USER_CREATE: 'true'
#       _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
#       _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin123}
#     user: "0:0"
#     volumes:
#       - ${AIRFLOW_PROJ_DIR:-.}:/sources

#   # Interface CLI pour debug (optionnel)
#   airflow-cli:
#     <<: *airflow-common
#     profiles:
#       - debug
#     environment:
#       <<: *airflow-common-env
#       CONNECTION_CHECK_MAX_COUNT: "0"
#     command:
#       - bash
#       - -c
#       - |
#         echo "🔧 Interface CLI Airflow activée"
#         echo "Utilisez: docker-compose --profile debug run airflow-cli <commande>"
#         bash

# volumes:
#   postgres-db-volume:
#     driver: local
#   airflow-worker-tmp:
#     driver: local

# # Configuration réseau (optionnel)
# networks:
#   default:
#     name: airflow_network


# version: '3.8'

# x-airflow-common:
#   &airflow-common
#   build: 
#     context: .
#     dockerfile: Dockerfile
#   environment:
#     &airflow-common-env
#     # Configuration Airflow de base
#     AIRFLOW__CORE__EXECUTOR: LocalExecutor
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     AIRFLOW__CORE__FERNET_KEY: 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg='
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
#     AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
#     AIRFLOW__WEBSERVER__RBAC: 'true'
    
#     # Optimisations performances
#     AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 300
#     AIRFLOW__CORE__PARALLELISM: 16
#     AIRFLOW__CORE__DAG_CONCURRENCY: 8
#     AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: 8
#     AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 300
#     AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'
    
#     # Configuration dbt
#     DBT_PROFILES_DIR: /opt/airflow/.dbt
#     DBT_PROJECT_DIR: /opt/airflow/dbt_projects
    
#     # Configuration Chrome/Selenium
#     CHROME_BIN: /usr/bin/google-chrome
#     CHROMEDRIVER_PATH: /usr/local/bin/chromedriver
#     DISPLAY: :99
    
#     # Variables système
#     PYTHONUNBUFFERED: 1
#     AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    
#   volumes:
#     # Structure de fichiers du projet
#     - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
#     - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
#     - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
#     - ${AIRFLOW_PROJ_DIR:-.}/airflow/scripts:/opt/airflow/scripts
#     - ${AIRFLOW_PROJ_DIR:-.}/airflow/data:/opt/airflow/data
    
#     # Configuration dbt
#     - ${AIRFLOW_PROJ_DIR:-.}/.dbt:/opt/airflow/.dbt
    
#     # Cache et performance
#     - airflow-worker-tmp:/tmp
    
#   user: "${AIRFLOW_UID:-50000}:0"
#   restart: unless-stopped
#   depends_on: &airflow-common-depends-on
#     postgres:
#       condition: service_healthy

# services:
#   # Base de données PostgreSQL optimisée
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: airflow
#       POSTGRES_PASSWORD: airflow
#       POSTGRES_DB: airflow
#       POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
#     volumes:
#       - postgres-db-volume:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#       start_period: 10s
#     restart: unless-stopped
#     command: >
#       postgres 
#       -c max_connections=200
#       -c shared_buffers=256MB
#       -c effective_cache_size=1GB
#       -c maintenance_work_mem=64MB
#       -c checkpoint_completion_target=0.9
#       -c wal_buffers=16MB
#       -c default_statistics_target=100

#   # Interface web Airflow
#   airflow-webserver:
#     <<: *airflow-common
#     command: webserver
#     ports:
#       - "8080:8080"
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Planificateur Airflow
#   airflow-scheduler:
#     <<: *airflow-common
#     command: scheduler
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Triggerer pour les tâches déférées
#   airflow-triggerer:
#     <<: *airflow-common
#     command: triggerer
#     healthcheck:
#       test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
#       interval: 30s
#       timeout: 10s
#       retries: 5
#       start_period: 30s
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   # Initialisation complète du projet
#   airflow-init:
#     <<: *airflow-common
#     entrypoint: /bin/bash
#     command:
#       - -c
#       - |
#         set -e
        
#         echo "🚀 Initialisation du Data Warehouse Airflow..."
        
#         # Vérifications système
#         echo "💾 Vérification des ressources système..."
#         free -h
#         df -h /
        
#         # Création de la structure complète du projet
#         echo "📁 Création de la structure de répertoires..."
        
#         # Structure principale
#         mkdir -p /sources/airflow/{dags,logs,plugins,scripts,data}
        
#         # Sous-répertoires pour les données
#         mkdir -p /sources/airflow/data/{raw,processed,staging}
#         mkdir -p /sources/airflow/scripts
        
#         # Structure dbt
#         mkdir -p /sources/.dbt/{profiles,logs}
#         mkdir -p /sources/.dbt/dbt_projects/{bank_reviews_decisionnal,bank_reviews_transactional}
        
#         # Création des fichiers de base si ils n'existent pas
#         echo "📝 Création des fichiers de configuration de base..."
        
#         # Fichier requirements.txt de base
#         if [ ! -f "/sources/requirements.txt" ]; then
#           cat > /sources/requirements.txt << 'EOF'
#         # Airflow et extensions
#         apache-airflow[postgres,celery,crypto,ssh]==2.10.5
        
#         # Web scraping
#         selenium==4.25.0
#         beautifulsoup4==4.12.3
#         requests==2.31.0
        
#         # Data processing
#         pandas==2.1.4
#         numpy==1.24.4
        
#         # Database
#         psycopg2-binary==2.9.9
#         sqlalchemy==2.0.25
        
#         # NLP et ML
#         spacy==3.8.2
#         scikit-learn==1.3.2
#         textblob==0.17.1
#         langdetect==1.0.9
        
#         # dbt
#         dbt-core==1.8.0
#         dbt-postgres==1.8.0
        
#         # Utilities
#         python-dotenv==1.0.0
#         pathlib==1.0.1
#         EOF
#         fi
        
#         # README de base
#         if [ ! -f "/sources/README.md" ]; then
#           cat > /sources/README.md << 'EOF'
#         # Bank Reviews Data Warehouse
        
#         ## Structure du projet
#         ```
#         📁 home/
#         ├── airflow/
#         │   ├── dags/
#         │   │   └── dag_load_reviews.py
#         │   └── scripts/
#         │       ├── connect_to_db.py
#         │       ├── scraper_banks.py
#         │       ├── scraper.py
#         │       ├── insert_data_to_json.py
#         │       ├── insert_data_to_postgresql.py
#         │       ├── convertir_data_relative.py
#         │       ├── detect_language.py
#         │       ├── topic_modeling.py
#         │       ├── sentiment_analysis.py
#         │       ├── banks_maroc.json 
#         │       └── avis.json
#         │
#         ├── .dbt/
#         │   └── dbt_projects/
#         │        ├── bank_reviews_decisionnal/
#         │        └── bank_reviews_transactional/
#         │
#         ├── requirements.txt
#         │
#         └── README.md
#         ```
        
#         ## Démarrage
#         1. `docker-compose up -d`
#         2. Accéder à http://localhost:8080
#         3. Identifiants: admin / admin123
#         EOF
#         fi
        
#         # Configuration des permissions
#         echo "🔐 Configuration des permissions..."
#         chown -R "${AIRFLOW_UID:-50000}:0" /sources/
#         find /sources -type d -exec chmod 775 {} \;
#         find /sources -type f -exec chmod 664 {} \; 2>/dev/null || true
        
#         # Initialisation de la base de données Airflow
#         echo "🗄️  Initialisation de la base de données..."
#         airflow db init
#         airflow db upgrade
        
#         # Création de l'utilisateur administrateur
#         echo "👤 Création de l'utilisateur administrateur..."
#         airflow users create \
#           --username "${_AIRFLOW_WWW_USER_USERNAME:-admin}" \
#           --firstname "Admin" \
#           --lastname "DataWarehouse" \
#           --role "Admin" \
#           --email "admin@datawarehouse.local" \
#           --password "${_AIRFLOW_WWW_USER_PASSWORD:-admin123}" 2>/dev/null || \
#         echo "ℹ️  L'utilisateur admin existe déjà"
        
#         # Vérification de l'environnement
#         echo "🔧 Vérification de l'environnement..."
#         echo "✅ Chrome: $(google-chrome --version 2>/dev/null || echo 'Non installé')"
#         echo "✅ ChromeDriver: $(chromedriver --version 2>/dev/null || echo 'Non installé')"
#         echo "✅ Python: $(python --version)"
#         echo "✅ Pip packages: $(pip list | wc -l) packages installés"
        
#         # Configuration dbt
#         echo "🔧 Configuration dbt..."
#         if [ ! -f "/sources/.dbt/profiles.yml" ]; then
#           cat > /sources/.dbt/profiles.yml << 'EOF'
#         bank_reviews_decisionnal:
#           target: dev
#           outputs:
#             dev:
#               type: postgres
#               host: postgres
#               user: airflow
#               password: airflow
#               port: 5432
#               dbname: airflow
#               schema: bank_reviews_decisionnal
#               threads: 4
#               keepalives_idle: 0
        
#         bank_reviews_transactional:
#           target: dev
#           outputs:
#             dev:
#               type: postgres
#               host: postgres
#               user: airflow
#               password: airflow
#               port: 5432
#               dbname: airflow
#               schema: bank_reviews_transactional
#               threads: 4
#               keepalives_idle: 0
#         EOF
#         fi
        
#         echo "✅ Initialisation terminée avec succès!"
#         echo "🌐 Interface web disponible sur: http://localhost:8080"
#         echo "👤 Identifiants: admin / admin123"
#         echo "🗄️  PostgreSQL: localhost:5432 (airflow/airflow)"
#         echo "📊 Structure du projet prête pour le développement"
        
#     environment:
#       <<: *airflow-common-env
#       _AIRFLOW_DB_MIGRATE: 'true'
#       _AIRFLOW_WWW_USER_CREATE: 'true'
#       _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
#       _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin123}
#     user: "0:0"
#     volumes:
#       - ${AIRFLOW_PROJ_DIR:-.}:/sources

#   # Interface CLI pour debug et administration
#   airflow-cli:
#     <<: *airflow-common
#     profiles:
#       - debug
#     environment:
#       <<: *airflow-common-env
#       CONNECTION_CHECK_MAX_COUNT: "0"
#     command:
#       - bash
#       - -c
#       - |
#         echo "🔧 Interface CLI Airflow activée"
#         echo "Commandes disponibles:"
#         echo "  - airflow dags list"
#         echo "  - airflow tasks list <dag_id>"
#         echo "  - airflow dags trigger <dag_id>"
#         echo "  - dbt --version"
#         echo "  - python /opt/airflow/scripts/<script>.py"
#         echo ""
#         echo "Utilisez: docker-compose --profile debug run airflow-cli <commande>"
#         bash

# volumes:
#   postgres-db-volume:
#     driver: local
#   airflow-worker-tmp:
#     driver: local

# networks:
#   default:
#     name: airflow_datawarehouse_network
#     driver: bridge